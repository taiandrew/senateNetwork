library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Poisson,
#control = control.ergm(MCMC.prop.weights = "TNT")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Preamble ------
# Data munging etc.
library(arrow)
library(broom)
library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Geometric,
#control = control.ergm(MCMC.prop.weights = "TNT")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Poisson,
#control = control.ergm(MCMC.prop.weights = "TNT")
)
# Preamble ------
# Data munging etc.
library(arrow)
library(broom)
library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Poisson,
#control = control.ergm(MCMC.prop.weights = "TNT")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Convert to a data frame
results_df <- bind_rows(results)
# save results_df as a csv
write.csv(results_df, "./data/ergm_results.csv", row.names = FALSE)
# Preamble ------
# Data munging etc.
library(arrow)
library(broom)
library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Geometric,
control = control.ergm(MCMC.prop.weights = "TNT")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Preamble ------
# Data munging etc.
library(arrow)
library(broom)
library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Geometric,
control = control.ergm(MCMC.prop.weights = "random")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Convert to a data frame
results_df <- bind_rows(results)
# save results_df as a csv
write.csv(results_df, "./data/ergm_results.csv", row.names = FALSE)
View(results_df)
# Preamble ------
# Data munging etc.
library(arrow)
library(broom)
library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Poisson,
control = control.ergm(MCMC.prop.weights = "TNT")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Preamble ------
# Data munging etc.
library(arrow)
library(broom)
library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Poisson,
control = control.ergm(MCMC.prop.weights = "TNT")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Preamble ------
# Data munging etc.
library(arrow)
library(broom)
library(dplyr)
library(tidyr)
# To fit the ERGMs
library(network)
library(intergraph)
options(ergm.ABI.action = "ignore")   # Temporary workaround for version issue w ergm.count
library(ergm.count)
# Function that imports the session data and estimates the model ------
fit_ergm_for_session <- function(session_number) {
print(session_number)
# Construct file paths
cos_file <- sprintf("./data/cosponsors_%d.parquet", session_number)
bio_file <- sprintf("./data/biographical_%d.parquet", session_number)
# Import data
cos_data <- read_parquet(cos_file)
bio_data <- read_parquet(bio_file)
# Drop rows with missing values
cos_data <- cos_data %>% drop_na()
bio_data <- bio_data %>% drop_na()
# Drop if IDs are not in biodata
cos_data <- cos_data %>% filter(cosponsor_icpsr %in% bio_data$icpsr &
sponsor_icpsr %in% bio_data$icpsr)
# Create a new sequential key for IDs
unique_nodes <- unique(c(cos_data$cosponsor_icpsr, cos_data$sponsor_icpsr, bio_data$icpsr))
node_map <- data.frame(original_id = unique_nodes, new_id = seq_along(unique_nodes))
# Merge with new sequential IDs
cos_data <- merge(cos_data, node_map, by.x = "sponsor_icpsr", by.y = "original_id")
cos_data <- merge(cos_data, node_map, by.x = "cosponsor_icpsr", by.y = "original_id")
bio_data <- merge(bio_data, node_map, by.x = "icpsr", by.y = "original_id")
# Rename columns
cos_data <- cos_data %>% rename("id_sponsor" = "new_id.x", "id_cosponsor" = "new_id.y")
bio_data <- bio_data %>% rename("id" = "new_id")
# Rearrange bio data; ID needs to be first column
bio_data <- bio_data[ , !(names(bio_data) %in% c("icpsr_id", "__index_level_0__"))]
bio_data <- bio_data %>% select("id", everything())
# Create network
network_data <- asNetwork(cos_data[, c('id_cosponsor', 'id_sponsor')],
directed = TRUE, vertices = bio_data)
set.edge.attribute(network_data, "weight", cos_data$weight)  # Assign weights to edges
# Geometric reference - very dense network, but mostly small values
# MCMC prop hints -- no hints. Default is both sparse (not true here) and triads (which causes a computational error with ergm)
# Fit ERGM model
model <- ergm(network_data ~ edges +
nodecov('nominate_dim1') + absdiff('nominate_dim1') +
nodefactor('party') + nodematch('party') ,
response="weight", reference = ~Poisson,
#control = control.ergm(MCMC.prop.weights = "TNT")
)
# Save estimates
estimates <- tidy(model)
estimates$congress <- session_number
print(summary(model))
# Return the results
return(estimates)
}
# Calls ------
# Loop the function
results <- lapply(95:117, fit_ergm_for_session)
# Convert to a data frame
results_df <- bind_rows(results)
# save results_df as a csv
write.csv(results_df, "./data/ergm_results.csv", row.names = FALSE)
